[{"path":"https://docs.ropensci.org/rsvg/articles/svg-css.html","id":"svg-with-embedded-css","dir":"Articles","previous_headings":"","what":"SVG with embedded CSS","title":"Rendering SVG with CSS in R","text":"Mozilla example shows SVG specification allows style element, also supported browsers. Embedded CSS supported versions librsvg, quality css rendering improved lot recent versions librsvg. Rendering SVG embedded CSS","code":"str <- charToRaw('<svg viewBox=\"0 0 300 300\" xmlns=\"http://www.w3.org/2000/svg\">   <style>     circle {       fill: gold;       stroke: maroon;       stroke-width: 10px;     }   <\/style>    <circle cx=\"150\" cy=\"150\" r=\"100\" /> <\/svg>') rsvg_png(str, file = 'ex1.png')"},{"path":"https://docs.ropensci.org/rsvg/articles/svg-css.html","id":"svg-with-external-css","dir":"Articles","previous_headings":"","what":"SVG with external CSS","title":"Rendering SVG with CSS in R","text":"Recent versions librsvg can also apply external CSS file SVG. effect external CSS file embedded header HTML file. using external CSS, can split drawing structure styling. new “css” parameter requires somewhat recent version librsvg may work older Linux systems. available MacOS Windows, latest versions Ubuntu, Debian, Fedora, etc. Rendering SVG without CSS Rendering SVG external CSS","code":"svg <- charToRaw('<svg viewBox=\"0 0 300 300\" xmlns=\"http://www.w3.org/2000/svg\">   <circle cx=\"150\" cy=\"150\" r=\"100\" /> <\/svg>')  # Render without style: rsvg_png(svg, file = 'ex2.png') css <- charToRaw('circle {   fill: navy;   stroke: hotpink;   stroke-width: 10px; }') # Render without style: rsvg_png(svg, css = css, file = 'ex3.png')"},{"path":"https://docs.ropensci.org/rsvg/articles/svg-css.html","id":"bitmap-rendering-and-magick","dir":"Articles","previous_headings":"","what":"Bitmap rendering and magick","title":"Rendering SVG with CSS in R","text":"examples write rendered SVG file directly PNG file disk. can also render SVG -memory bitmap buffer. bitmap object array R contain pixels image. can read example using magick package subsequent image editing, save standard format.","code":"bitmap <- rsvg_raw('https://jeroen.github.io/images/tiger.svg', width = 600) str(bitmap) ##  raw [1:4, 1:600, 1:600] 00 00 00 00 ... magick::image_read(bitmap)"},{"path":"https://docs.ropensci.org/rsvg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer. Salim Brüggemann. Contributor.","code":""},{"path":"https://docs.ropensci.org/rsvg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J (2024). rsvg: Render SVG Images PDF, PNG, (Encapsulated) PostScript, Bitmap Arrays. R package version 2.6.0, https://github.com/ropensci/rsvg, https://docs.ropensci.org/rsvg/.","code":"@Manual{,   title = {rsvg: Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays},   author = {Jeroen Ooms},   year = {2024},   note = {R package version 2.6.0, https://github.com/ropensci/rsvg},   url = {https://docs.ropensci.org/rsvg/}, }"},{"path":"https://docs.ropensci.org/rsvg/index.html","id":"rsvg-","dir":"","previous_headings":"","what":"Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays","title":"Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays","text":"Render SVG Images PDF, PNG, PostScript, Bitmap Arrays Renders vector-based ‘svg’ images high-quality custom-size bitmap arrays using ‘librsvg’. resulting bitmap can written e.g. ‘png’, ‘jpeg’ ‘webp’ format. addition, package can convert images directly various formats pdf postscript.","code":""},{"path":"https://docs.ropensci.org/rsvg/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays","text":"R package: https://docs.ropensci.org/rsvg Upstream librsvg: https://gitlab.gnome.org/GNOME/librsvg","code":""},{"path":"https://docs.ropensci.org/rsvg/index.html","id":"hello-world","dir":"","previous_headings":"","what":"Hello World","title":"Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays","text":"","code":"# create some svg tmp <- tempfile() svglite::svglite(tmp, width = 10, height = 7) ggplot2::qplot(mpg, wt, data = mtcars, colour = factor(cyl)) dev.off()  # render it into a bitmap array bitmap <- rsvg(tmp, height = 1440) dim(bitmap) # h*w*c png::writePNG(bitmap, \"bitmap.png\", dpi = 144) jpeg::writeJPEG(bitmap, \"bitmap.jpg\", quality = 1) webp::write_webp(bitmap, \"bitmap.webp\", quality = 100)  # render straight to output format rsvg_pdf(tmp, \"out.pdf\") rsvg_png(tmp, \"out.png\") rsvg_svg(tmp, \"out.svg\") rsvg_ps(tmp, \"out.ps\")"},{"path":"https://docs.ropensci.org/rsvg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Render SVG Images into PDF, PNG, (Encapsulated) PostScript, or Bitmap Arrays","text":"Binary packages OS-X Windows can installed directly CRAN: Installation source Linux OSX requires librsvg2. Debian Ubuntu install librsvg2-dev: Fedora, CentOS RHEL need librsvg2-devel: OS-X use rsvg Homebrew:","code":"install.packages(\"rsvg\") sudo apt-get install -y librsvg2-dev sudo yum install librsvg2-devel brew install librsvg"},{"path":"https://docs.ropensci.org/rsvg/reference/librsvg_version.html","id":null,"dir":"Reference","previous_headings":"","what":"librsvg version — librsvg_version","title":"librsvg version — librsvg_version","text":"Print version librsvg library","code":""},{"path":"https://docs.ropensci.org/rsvg/reference/librsvg_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"librsvg version — librsvg_version","text":"","code":"librsvg_version()"},{"path":"https://docs.ropensci.org/rsvg/reference/rsvg.html","id":null,"dir":"Reference","previous_headings":"","what":"Render SVG into Bitmap — rsvg","title":"Render SVG into Bitmap — rsvg","text":"Render svg image high quality bitmap. width height NULL, output resolution matches input. either width height specified, image scaled proportionally. width height specified, image stretched requested size.","code":""},{"path":"https://docs.ropensci.org/rsvg/reference/rsvg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render SVG into Bitmap — rsvg","text":"","code":"rsvg(svg, width = NULL, height = NULL, css = NULL)  rsvg_raw(svg, width = NULL, height = NULL, css = NULL)  rsvg_nativeraster(svg, width = NULL, height = NULL, css = NULL)  rsvg_webp(svg, file = NULL, width = NULL, height = NULL, css = NULL)  rsvg_png(svg, file = NULL, width = NULL, height = NULL, css = NULL)  rsvg_pdf(svg, file = NULL, width = NULL, height = NULL, css = NULL)  rsvg_svg(svg, file = NULL, width = NULL, height = NULL, css = NULL)  rsvg_ps(svg, file = NULL, width = NULL, height = NULL, css = NULL)  rsvg_eps(svg, file = NULL, width = NULL, height = NULL, css = NULL)"},{"path":"https://docs.ropensci.org/rsvg/reference/rsvg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render SVG into Bitmap — rsvg","text":"svg path/url svg file raw vector svg data. Use charToRaw convert SVG string raw data. width output width pixels NULL default. height output height pixels NULL default css path/url external css file raw vector css data. requires system recent version librsvg. file path output file NULL return content raw vector","code":""},{"path":"https://docs.ropensci.org/rsvg/reference/rsvg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render SVG into Bitmap — rsvg","text":"","code":"# create some svg options(example.ask=FALSE) tmp <- tempfile() svglite::svglite(tmp, width = 10, height = 7) ggplot2::qplot(mpg, wt, data = mtcars, colour = factor(cyl)) #> Warning: `qplot()` was deprecated in ggplot2 3.4.0. dev.off() #> agg_png  #>       2   # convert directly into a vector or bitmap graphics format rsvg_pdf(tmp, \"out.pdf\") rsvg_png(tmp, \"out.png\") rsvg_svg(tmp, \"out.svg\") rsvg_ps(tmp, \"out.ps\") rsvg_eps(tmp, \"out.eps\")  # render into raw bitmap array bitmap <- rsvg(tmp, height = 1440) dim(bitmap) # h*w*c #> [1] 1440 2057    4  # render to native raster object nr <- rsvg_nativeraster(tmp) # grid::grid.raster(nr)  # read in your package of choice magick::image_read(bitmap) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG     2057   1440 sRGB       TRUE         0 72x72   webp::write_webp(bitmap, \"bitmap.webp\", quality = 100)  # cleanup unlink(c(\"out.*\", \"bitmap.webp\"))"}]
